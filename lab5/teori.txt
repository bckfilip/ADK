1. Vad skiljer en heuristik från en approximationsalgoritm?

-En heuristik är ett tillvägagångssätt att närma sig en lösning, men som saknar garanti för varken en optimal eller korrekt lösning.
En approximationsalgoritm är i princip en heuristik sammankopplat med ett bevis. Detta bevis handlar bara om worst-case-scenario som visar tidskvalitén på algortimen beroende på input. Denna kvalité är formulerad som en kvot optimal/t där t är den approximativa faktorn som minskar ju bättre algoritmen är.

2. Rollbesättningsproblemet i labb5 är ett minimeringsproblem. Vad är målfunktionen för problemet?

-Målfunktionen med minimeringsproblemet är att minska antalet skådespelare för att sätta alla roller.

3. I labb 5 har s.k superskådisar införts i rollbesättningsproblemet. Varför behövde superskådisar införas i labb5?

-För att kunna garantera att det hittas en lösning på polynomisk tid.

4. Om lokalsökning ska användas som heuristik för rollbesättningsproblemet behös en metod för lokal modifiering av en lösning. Föreslå en lokal modifiering för rollbesättningsproblemet.

-En lokalmodifiering är att placera superskådisar i alla roller och vid lokalsökningen byta ut dessa mot vanliga skådespelare. 

5. Vid lokalsökning gör man lokala modifieringar som inte försämrar målfunktionens värde upprepade gånger. Bevisa attt detta tillvägagångssätt(med din lokala modifiering från upg4 inte alltid leder till att den optimala lösningen hittas.

-Om man hamnar i ett lokalt minimum kommer man uppnå ett sämre värde på målfunktionen oavsett vilket håll i grafen man går. Detta betyder dock inte att det är ett optimalt värde då det kommer finnas ett globalt minimum(se graf).

6. Varför fungerar inte ditt bevis i upg5 om 'Simulated annealing' används istället för upprepad lokal förbättring?

-SA utför 'dåliga' beslut i hopp om att det i slutändan leder till ett bättre resultat. Det leder alltså till att man inte fastnar i dessa lokala minima punkter jag nämnde ovan.

7. När bör man sluta göra upprepade lokala modifieringar vid lokalsökning? Dvs, hur länga ska man hålla på?

-Antingen tills man kommer till en optimal lösning eller tills en tidsgräns har nåtts. Om man hamnar i ett lokalt min och har tid kvar kan man testa att fortsätta.

8. Vad finns det för fördelar med att införa slump i en heuristik? 

-Som jag nämnde i tidigare punkter så fastnar algoritmen lätt i lokala minima och likt SA så kan en slumpmässig faktor hjälpa till att 'hoppa ur' dessa och potentiellt leda till en lösning som är närmare den optimala.
